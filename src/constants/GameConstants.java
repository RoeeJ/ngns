package constants;

import client.MapleClient;
import constants.skills.Aran;
import server.CashShop;
import tools.FilePrinter;

import java.util.Arrays;
import java.util.List;

/**
 * @author kevintjuh93
 */
public class GameConstants {

    public static final List<Integer> characterEyes = Arrays.asList(20000, 20001, 20002, 20100, 20401, 20402, 21000, 21001, 21002, 21201, 21700);
    public static final List<Integer> characterHair = Arrays.asList(30000, 30020, 30030, 31000, 31040, 31050, 30007, 30027, 30037, 31007, 31047, 31057, 30002, 30022, 30032, 31002, 31042, 31052, 30003, 30023, 30033, 31003, 31043, 31053);
    public static final List<Integer> characterTop = Arrays.asList(1040002, 1040006, 1040010, 1041002, 1041006, 1041010, 1041011, 1042167);
    public static final List<Integer> characterBottom = Arrays.asList(1060002, 1060006, 1061002, 1061008, 1062115);
    public static final List<Integer> characterShoes = Arrays.asList(1072001, 1072005, 1072037, 1072038, 1072383);
    public static final List<Integer> characterWeapon = Arrays.asList(1302000, 1312004, 1322005, 1442079);
    public static final List<Integer> characterSkin = Arrays.asList(0, 1, 2, 3);
    public static final List<Integer> crashers = Arrays.asList(1320006, 5221007, 4111005, 14111002, 21120010, 2101005, 2101004, 12101002, 2111006, 2121006, 2211003, 2221006, 4121003, 5220011, 13111002, 15111006, 21110004, 15111007, 5211005, 5211004, 2221001, 5121002, 21120009, 21100004, 4221003, 2301005, 5201006, 5221004, 3121004, 5210000, 2121001, 2321001, 13101002, 1100002, 1100003, 1200002, 1200003, 1300002, 1300003, 3100001, 3200001, 11101002);
    public static final List<Integer> rings = Arrays.asList(1112812, 1112001, 1112802, 1112801, 1112005, 1112012, 1112800, 1112006, 1112003, 1112007, 1112002, 1112810, 1112811);
    public static final List<Integer> pyramidMaps = Arrays.asList(926010001, 926010100, 926010200, 926010300, 926010400, 926010500, 926011100, 926011200, 926011300, 926011400, 926011500, 926012100, 926012200, 926012300, 926012400, 926012500, 926013100, 926013200, 926013300, 926013400, 926013500, 926020001, 926020100, 926020200, 926020300, 926020400, 926020500, 926021100, 926021200, 926021300, 926021400, 926021500, 926022100, 926022200, 926022300, 926022400, 926022500, 926023100, 926023200, 926023300, 926023400, 926023500, 926010000, 926010001, 926010100, 926010200, 926010300, 926010400, 926010500, 926011100, 926011200, 926011300, 926011400, 926011500, 926012100, 926012200, 926012300, 926012400, 926012500, 926013100, 926013200, 926013300, 926013400, 926013500, 926020001, 926020100, 926020200, 926020300, 926020400, 926020500, 926021100, 926021200, 926021300, 926021400, 926021500, 926022100, 926022200, 926022300, 926022400, 926022500, 926023100, 926023200, 926023300, 926023400, 926023500);
    public static final List<Integer> dojoMaps = Arrays.asList(925020010, 925020011, 925020012, 925020013, 925020014, 925020100, 925020101, 925020102, 925020103, 925020104, 925020105, 925020106, 925020107, 925020108, 925020109, 925020110, 925020111, 925020112, 925020113, 925020114, 925020200, 925020201, 925020202, 925020203, 925020204, 925020205, 925020206, 925020207, 925020208, 925020209, 925020210, 925020211, 925020212, 925020213, 925020214, 925020300, 925020301, 925020302, 925020303, 925020304, 925020305, 925020306, 925020307, 925020308, 925020309, 925020310, 925020311, 925020312, 925020313, 925020314, 925020400, 925020401, 925020402, 925020403, 925020404, 925020405, 925020406, 925020407, 925020408, 925020409, 925020410, 925020411, 925020412, 925020413, 925020414, 925020500, 925020501, 925020502, 925020503, 925020504, 925020505, 925020506, 925020507, 925020508, 925020509, 925020510, 925020511, 925020512, 925020513, 925020514, 925020600, 925020601, 925020602, 925020603, 925020604, 925020605, 925020606, 925020607, 925020608, 925020609, 925020610, 925020611, 925020612, 925020613, 925020614, 925020700, 925020701, 925020702, 925020703, 925020704, 925020705, 925020706, 925020707, 925020708, 925020709, 925020710, 925020711, 925020712, 925020713, 925020714, 925020800, 925020801, 925020802, 925020803, 925020804, 925020805, 925020806, 925020807, 925020808, 925020809, 925020810, 925020811, 925020812, 925020813, 925020814, 925020900, 925020901, 925020902, 925020903, 925020904, 925020905, 925020906, 925020907, 925020908, 925020909, 925020910, 925020911, 925020912, 925020913, 925020914, 925021000, 925021001, 925021002, 925021003, 925021004, 925021005, 925021006, 925021007, 925021008, 925021009, 925021010, 925021011, 925021012, 925021013, 925021014, 925021100, 925021101, 925021102, 925021103, 925021104, 925021105, 925021106, 925021107, 925021108, 925021109, 925021110, 925021111, 925021112, 925021113, 925021114, 925021200, 925021201, 925021202, 925021203, 925021204, 925021205, 925021206, 925021207, 925021208, 925021209, 925021210, 925021211, 925021212, 925021213, 925021214, 925021300, 925021301, 925021302, 925021303, 925021304, 925021305, 925021306, 925021307, 925021308, 925021309, 925021310, 925021311, 925021312, 925021313, 925021314, 925021400, 925021401, 925021402, 925021403, 925021404, 925021405, 925021406, 925021407, 925021408, 925021409, 925021410, 925021411, 925021412, 925021413, 925021414, 925021500, 925021501, 925021502, 925021503, 925021504, 925021505, 925021506, 925021507, 925021508, 925021509, 925021510, 925021511, 925021512, 925021513, 925021514, 925021600, 925021601, 925021602, 925021603, 925021604, 925021605, 925021606, 925021607, 925021608, 925021609, 925021610, 925021611, 925021612, 925021613, 925021614, 925021700, 925021701, 925021702, 925021703, 925021704, 925021705, 925021706, 925021707, 925021708, 925021709, 925021710, 925021711, 925021712, 925021713, 925021714, 925021800, 925021801, 925021802, 925021803, 925021804, 925021805, 925021806, 925021807, 925021808, 925021809, 925021810, 925021811, 925021812, 925021813, 925021814, 925021900, 925021901, 925021902, 925021903, 925021904, 925021905, 925021906, 925021907, 925021908, 925021909, 925021910, 925021911, 925021912, 925021913, 925021914, 925022000, 925022001, 925022002, 925022003, 925022004, 925022005, 925022006, 925022007, 925022008, 925022009, 925022010, 925022011, 925022012, 925022013, 925022014, 925022100, 925022101, 925022102, 925022103, 925022104, 925022105, 925022106, 925022107, 925022108, 925022109, 925022110, 925022111, 925022112, 925022113, 925022114, 925022200, 925022201, 925022202, 925022203, 925022204, 925022205, 925022206, 925022207, 925022208, 925022209, 925022210, 925022211, 925022212, 925022213, 925022214, 925022300, 925022301, 925022302, 925022303, 925022304, 925022305, 925022306, 925022307, 925022308, 925022309, 925022310, 925022311, 925022312, 925022313, 925022314, 925022400, 925022401, 925022402, 925022403, 925022404, 925022405, 925022406, 925022407, 925022408, 925022409, 925022410, 925022411, 925022412, 925022413, 925022414, 925022500, 925022501, 925022502, 925022503, 925022504, 925022505, 925022506, 925022507, 925022508, 925022509, 925022510, 925022511, 925022512, 925022513, 925022514, 925022600, 925022601, 925022602, 925022603, 925022604, 925022605, 925022606, 925022607, 925022608, 925022609, 925022610, 925022611, 925022612, 925022613, 925022614, 925022700, 925022701, 925022702, 925022703, 925022704, 925022705, 925022706, 925022707, 925022708, 925022709, 925022710, 925022711, 925022712, 925022713, 925022714, 925022800, 925022801, 925022802, 925022803, 925022804, 925022805, 925022806, 925022807, 925022808, 925022809, 925022810, 925022811, 925022812, 925022813, 925022814, 925022900, 925022901, 925022902, 925022903, 925022904, 925022905, 925022906, 925022907, 925022908, 925022909, 925022910, 925022911, 925022912, 925022913, 925022914, 925023000, 925023001, 925023002, 925023003, 925023004, 925023005, 925023006, 925023007, 925023008, 925023009, 925023010, 925023011, 925023012, 925023013, 925023014, 925023100, 925023101, 925023102, 925023103, 925023104, 925023105, 925023106, 925023107, 925023108, 925023109, 925023110, 925023111, 925023112, 925023113, 925023114, 925023200, 925023201, 925023202, 925023203, 925023204, 925023205, 925023206, 925023207, 925023208, 925023209, 925023210, 925023211, 925023212, 925023213, 925023214, 925023300, 925023301, 925023302, 925023303, 925023304, 925023305, 925023306, 925023307, 925023308, 925023309, 925023310, 925023311, 925023312, 925023313, 925023314, 925023400, 925023401, 925023402, 925023403, 925023404, 925023405, 925023406, 925023407, 925023408, 925023409, 925023410, 925023411, 925023412, 925023413, 925023414, 925023500, 925023501, 925023502, 925023503, 925023504, 925023505, 925023506, 925023507, 925023508, 925023509, 925023510, 925023511, 925023512, 925023513, 925023514, 925023600, 925023601, 925023602, 925023603, 925023604, 925023605, 925023606, 925023607, 925023608, 925023609, 925023610, 925023611, 925023612, 925023613, 925023614, 925023700, 925023701, 925023702, 925023703, 925023704, 925023705, 925023706, 925023707, 925023708, 925023709, 925023710, 925023711, 925023712, 925023713, 925023714, 925023800, 925023801, 925023802, 925023803, 925023804, 925023805, 925023806, 925023807, 925023808, 925023809, 925023810, 925023811, 925023812, 925023813, 925023814, 925030100, 925030101, 925030102, 925030103, 925030104, 925030200, 925030201, 925030202, 925030203, 925030204, 925030300, 925030301, 925030302, 925030303, 925030304, 925030400, 925030401, 925030402, 925030403, 925030404, 925030500, 925030501, 925030502, 925030503, 925030504, 925030600, 925030601, 925030602, 925030603, 925030604, 925030700, 925030701, 925030702, 925030703, 925030704, 925030800, 925030801, 925030802, 925030803, 925030804, 925030900, 925030901, 925030902, 925030903, 925030904, 925031000, 925031001, 925031002, 925031003, 925031004, 925031100, 925031101, 925031102, 925031103, 925031104, 925031200, 925031201, 925031202, 925031203, 925031204, 925031300, 925031301, 925031302, 925031303, 925031304, 925031400, 925031401, 925031402, 925031403, 925031404, 925031500, 925031501, 925031502, 925031503, 925031504, 925031600, 925031601, 925031602, 925031603, 925031604, 925031700, 925031701, 925031702, 925031703, 925031704, 925031800, 925031801, 925031802, 925031803, 925031804, 925031900, 925031901, 925031902, 925031903, 925031904, 925032000, 925032001, 925032002, 925032003, 925032004, 925032100, 925032101, 925032102, 925032103, 925032104, 925032200, 925032201, 925032202, 925032203, 925032204, 925032300, 925032301, 925032302, 925032303, 925032304, 925032400, 925032401, 925032402, 925032403, 925032404, 925032500, 925032501, 925032502, 925032503, 925032504, 925032600, 925032601, 925032602, 925032603, 925032604, 925032700, 925032701, 925032702, 925032703, 925032704, 925032800, 925032801, 925032802, 925032803, 925032804, 925032900, 925032901, 925032902, 925032903, 925032904, 925033000, 925033001, 925033002, 925033003, 925033004, 925033100, 925033101, 925033102, 925033103, 925033104, 925033200, 925033201, 925033202, 925033203, 925033204, 925033300, 925033301, 925033302, 925033303, 925033304, 925033400, 925033401, 925033402, 925033403, 925033404, 925033500, 925033501, 925033502, 925033503, 925033504, 925033600, 925033601, 925033602, 925033603, 925033604, 925033700, 925033701, 925033702, 925033703, 925033704, 925033800, 925033801, 925033802, 925033803, 925033804);

    public static boolean isValidCreationConfiguration(MapleClient c, int eye, int hair, int top, int bottom, int shoes, int weapon, int skin) {
        if (!characterEyes.contains(eye)) {
            FilePrinter.print("charCreation", String.format("eye->%d", eye));
            return false;
        }
        if (!characterHair.contains(hair)) {
            FilePrinter.print("charCreation", String.format("hair->%d", hair));
            return false;
        }
        if (!characterTop.contains(top)) {
            FilePrinter.print("charCreation", String.format("top->%d", top));
            return false;
        }
        if (!characterBottom.contains(bottom)) {
            FilePrinter.print("charCreation", String.format("bottom->%d", bottom));
            return false;
        }
        if (!characterShoes.contains(shoes)) {
            FilePrinter.print("charCreation", String.format("shoes->%d", shoes));
            return false;
        }
        if (!characterWeapon.contains(weapon)) {
            FilePrinter.print("charCreation", String.format("weapon->%d", weapon));
            return false;
        }
        if (!characterSkin.contains(skin)) {
            FilePrinter.print("charCreation", String.format("skin->%d", skin));
            return false;
        }
        return true;
    }

	public static int getHiddenSkill(final int skill) {
		switch (skill) {
		case Aran.HIDDEN_FULL_DOUBLE:
		case Aran.HIDDEN_FULL_TRIPLE:
			return Aran.FULL_SWING;
		case Aran.HIDDEN_OVER_DOUBLE:
		case Aran.HIDDEN_OVER_TRIPLE:
			return Aran.OVER_SWING;
		}
		return skill;
	}

	public static boolean isAran(final int job) {
		return job == 2000 || (job >= 2100 && job <= 2112);
	}

	public static boolean isCrasher(int skill) {
		return crashers.contains(skill);
	}

	public static boolean isValidRing(CashShop.CashItem ring) {
		return rings.contains(ring.toItem().getItemId());
	}

	public static boolean canBeUsedWithMorph(int skillid) {
		switch(skillid) {
			case 2001003 : //magic armor
			case 12001002: //magic armor
			case 1001003 : //iron body
			case 11001001: //iron body
				return false;
			default:
				return true;
		}
	}
	public static boolean isDisabledSkill(int skillid, int mapid) {
		switch(skillid){
		case 1020: 
		case 10001020:
		case 20001020:
		{
			return !pyramidMaps.contains(mapid);
		}
		case 10001009: 
		case 20001009:
		case 1009:
		case 10001010:
		case 1010:
		case 20001010:
		case 1011: 
		case 1000101:
		case 20001011:
		{
			return !dojoMaps.contains(mapid);
		}
		default:
			return false;
		}
	}

	public static int getSkillBook(final int job) {
		if (job >= 2210 && job <= 2218) {
			return job - 2209;
		}
		return 0;
	}


	public static boolean isAranSkills(final int skill) {
		return Aran.FULL_SWING == skill || Aran.OVER_SWING == skill || Aran.COMBO_TEMPEST == skill || Aran.COMBO_PENRIL == skill || Aran.COMBO_DRAIN == skill
				|| Aran.HIDDEN_FULL_DOUBLE == skill || Aran.HIDDEN_FULL_TRIPLE == skill || Aran.HIDDEN_OVER_DOUBLE == skill || Aran.HIDDEN_OVER_TRIPLE == skill
				|| Aran.COMBO_SMASH == skill || Aran.DOUBLE_SWING  == skill || Aran.TRIPLE_SWING == skill;
	}

	public static boolean isHiddenSkills(final int skill) {
		return Aran.HIDDEN_FULL_DOUBLE == skill || Aran.HIDDEN_FULL_TRIPLE == skill || Aran.HIDDEN_OVER_DOUBLE == skill || Aran.HIDDEN_OVER_TRIPLE == skill;
	}

	public static boolean isInJobTree(int skillId, int jobId) {
		int skill = skillId / 10000;
		return ((jobId - skill) + skill) == jobId;
	}

	public static boolean isPqSkill(final int skill) {
		return skill >= 20001013 && skill <= 20000018 || skill  % 10000000 == 1020 || skill == 10000013 || skill  % 10000000 >= 1009 && skill % 10000000 <= 1011;
	}

	public static boolean bannedBindSkills(final int skill) {
		return isAranSkills(skill) || isPqSkill(skill);
	}

	public static boolean isGMSkills(final int skill) {
		return skill >= 9001000 && skill <= 9101008 || skill >= 8001000 && skill <= 8001001;
	}

	public static boolean isDojo(int mapid) {
		return mapid >= 925020100 && mapid <= 925023814;
	}

	public static boolean isPyramid(int mapid) {
		return mapid >= 926010010 & mapid <= 930010000;
	}

	public static boolean isPQSkillMap(int mapid) {
		return isDojo(mapid) || isPyramid(mapid);
	}

	public static boolean isFinisherSkill(int skillId) {
		return skillId > 1111002 && skillId < 1111007 || skillId == 11111002 || skillId == 11111003;
	}
}
